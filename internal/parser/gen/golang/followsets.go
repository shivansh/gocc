package golang

import (
	"bytes"
	"path"
	"text/template"

	"github.com/goccmack/gocc/internal/io"
	"github.com/goccmack/gocc/internal/parser/follow"
)

type FollowsetEntry struct {
	Nonterminal string
	Terminals   []string // tokens belonging to follow set of nonterminal
}

type FollowsetData struct {
	FollowSets []FollowsetEntry
}

func GenFollowSetTable(outDir string, flw *follow.FollowSets) {
	fname := path.Join(outDir, "parser", "followsets.go")
	tmpl, err := template.New("follow").Parse(followsetSrc[1:])
	if err != nil {
		panic(err)
	}
	wr := new(bytes.Buffer)
	if err := tmpl.Execute(wr, GetFollowSetData(flw)); err != nil {
		panic(err)
	}
	io.WriteFile(fname, wr.Bytes())
}

func GetFollowSetData(flw *follow.FollowSets) *FollowsetData {
	data := &FollowsetData{
		FollowSets: make([]FollowsetEntry, 0),
	}

	for k, v := range flw.Getter() {
		terminals := []string{}
		for terminal, _ := range v {
			terminals = append(terminals, terminal)
		}
		flwEntry := FollowsetEntry{
			Nonterminal: k,
			Terminals:   terminals,
		}
		data.FollowSets = append(data.FollowSets, flwEntry)
	}

	return data
}

const followsetSrc = `
// Code generated by gocc; DO NOT EDIT.

package parser

type FollowSetEntry struct {
	Nonterminal string
	Terminals map[string]bool
}

var followsets = []FollowSetEntry{
	{{- range $i, $entry := .FollowSets }}
	FollowSetEntry{
		Nonterminal: "{{$entry.Nonterminal}}",
		Terminals: map[string]bool{ {{- range $j, $mem := $entry.Terminals}} "{{$mem}}": true, {{- end}} },
	},
	{{- end }}
}
`
